import java.util.*;
import java.io.*;
import java.awt.*;

public class MapDataDrawer
{
  
  private int[][] grid;
  
  public MapDataDrawer(String filename, int rows, int cols) throws FileNotFoundException, IOException {
    // initialize grid 
    //read the data from the file into the grid
    
    try (Scanner scan = new Scanner(new File(filename))) {
      grid=new int[rows][cols];
      for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
          grid[i][j] = Integer.parseInt(scan.next());
        }
      }
    }       
  }
  
  
  
  
  
  /**
   * @return the min value in the entire grid
   */
  public int findMinValue(){
    return grid[0][1];    
  }
  /**
   * @return the max value in the entire grid
   */
  public int findMaxValue(){
    return -1;
  }
  
  /**
   * @param col the column of the grid to check
   * @return the index of the row with the lowest value in the given col for the grid
   */
  public  int indexOfMinInCol(int col){
    
    return -1;
  }
  
  /**
   * Draws the grid using the given Graphics object.
   * Colors should be grayscale values 0-255, scaled based on min/max values in grid
   */
  public void drawMap(Graphics g){
    
    
    
    
  }
  
  /**
   * Find a path from West-to-East starting at given row.
   * Choose a foward step out of 3 possible forward locations, using greedy method described in assignment.
   * @return the total change in elevation traveled from West-to-East
   */
  public int drawLowestElevPath(Graphics g, int row){
    return -1;
  }
  
  /**
   * @return the index of the starting row for the lowest-elevation-change path in the entire grid.
   */
  public int indexOfLowestElevPath(Graphics g){
    return -1;
    
  }
  
  
}